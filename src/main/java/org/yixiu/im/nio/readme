NIO基础
    Buffer类是一个非线程安全的类
    8种缓冲区类：ByteBuffer/CharBuffer/ShortBuffer/IntBuffer/LongBuffer/FloatBuffer/DoubleBuffer/MappedByteBuffer
    Buffer的重要属性：
        capacity--容量
            一经初始化就不再改变，capacity不是指内存块byte数组的大小，而是写入的数据对象(对应各种数据类型)的数量。
        position--读写位置
            缓冲区中下一个要被读或写的元素的索引
        limit--读写限制
            缓冲区中当前的数据量
        mark--标记
            使用mark()方法标记position的位置，再使用reset()方法可以恢复position到mark()方法标记的位置

    Channel
        NIO中一个连接用Channel表示。更广泛的层面来说，一个通道可以表示一个底层的文件描述符，例如硬件设备、文件、网络连接等。
        除了可以对应底层文件描述符，NIO Channel 还可以细化到对应不同的网络传输协议。

        主要类型：
            FileChannel:
                文件通道，用于文件数据的读写。
                阻塞模式，不能设置为非阻塞模式。

            SocketChannel:
                套接字通道，用于Socket套接字TCP连接的数据读写。

            ServerSocketChannel:
                服务器套接字通道，为每个监听到的TCP连接请求，创建一个SocketChannel套接字通道。

            DatagramChannel:
                数据报通道，用于UDP协议的数据读写。

    Selector
        选择器的使命是完成IO的多路复用。
        一个通道代表一个连接通路，通过选择器可以同时监控多个通道的IO状况。选择器和通道的关系，是监控和被监控的关系。
        一个单线程处理一个选择器，一个选择器可以监控多个通道(极端情况下，只用一个线程就可以处理数万个连接的通道，大大减少线程间上下文切换的开销)。
        通道通过调用Channel#register方法完成注册，register方法的第一个参数指定要注册的选择器实例，第二个参数指定选择器要监控的IO事件类型。

        可监控的事件类型：
            可读：SelectionKey.OP_READ--SocketChannel有数据可读
            可写：SelectionKey.OP_WRITE--SocketChannel等待数据写入
            连接：SelectionKey.OP_CONNECT--SocketChannel完成了和对端的握手连接
            接收：SelectionKey.OP_ACCEPT--ServerSocketChannel监听到一个新连接的到来

            同时监控多个事件，可以使用 按位或(|) 来实现。

        一个通道可以被监控需要继承SelectableChannel类。

        SelectionKey 选择键
            选择键简单来说就是被选择器选中的IO事件。
            通过选择键我们可以：
                获得通道的IO事件类型。
                获得发生IO事件的通道。
                获得选出选择键的选择器实例。

        选择器使用流程：
            获取选择器实例
            将通道注册到选择器中
            轮询感兴趣的IO就绪事件(选择键集合)
























